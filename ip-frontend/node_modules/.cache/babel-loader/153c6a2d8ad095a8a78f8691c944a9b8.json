{"ast":null,"code":"import actions from \"../actions/profile.actions\";\nimport axios from 'axios';\nimport { NOTIFICATION_TYPES, openNotification } from \"../../Components/Notifications/notifications\";\nimport history from '../../Routes/history';\n\nconst profileFunctions = dispatch => {\n  const logout = () => {\n    dispatch(actions.logout());\n  };\n\n  const login = async (email, password) => {\n    var url = 'http://127.0.0.1:8080/login/?username=' + email + '&password=' + password;\n    axios.get(url, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(response => {\n      const token = response.data.token;\n\n      if (response.status === 200) {\n        console.log(response);\n        openNotification('LOGIN', \"Autentificarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n        dispatch(actions.authenticate(token));\n      } else {\n        openNotification('LOGIN', \"Email sau parola gresita!\", NOTIFICATION_TYPES.ERROR);\n      }\n    });\n  };\n\n  const signup = async (nume, pass, email, firstname, lastname, organizatie) => {\n    var url = 'http://127.0.0.1:8080/users/createUser/?username=' + nume + '&password=' + pass + '&email=' + email + '&firstname=' + firstname + '&lastname=' + lastname + '&organizationId=' + organizatie;\n    axios.post(url, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(response => {\n      const token = response.data.token;\n\n      if (response.status === 200) {\n        console.log(response);\n        openNotification('SIGNUP', \"Inregistrarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n        dispatch(actions.signup(token));\n        history.push('/login');\n        setTimeout(function () {\n          window.location.reload();\n        }, 1000);\n      } else {\n        openNotification('SIGNUP', \"Contul exista deja / Nu a putut fi inregistrat contul!\", NOTIFICATION_TYPES.ERROR);\n      }\n    });\n  };\n\n  const getProfile = async username => {\n    var url = 'http://127.0.0.1:8080/users/getUserByUsername/?username=' + username;\n  };\n\n  const getSession = () => {\n    dispatch(actions.getSession());\n  };\n\n  const changePage = page => {\n    dispatch(actions.changeTab(page));\n  };\n\n  const getCurrentPage = () => {\n    dispatch(actions.getActivePage);\n  };\n\n  return {\n    logout,\n    login,\n    signup,\n    getSession,\n    changePage,\n    getCurrentPage\n  };\n};\n\nexport default profileFunctions;","map":{"version":3,"sources":["C:/Users/Stefan/Desktop/FrontEnd/ip-frontend/src/Context/functions/profile.functions.js"],"names":["actions","axios","NOTIFICATION_TYPES","openNotification","history","profileFunctions","dispatch","logout","login","email","password","url","get","headers","then","response","token","data","status","console","log","SUCCESS","authenticate","ERROR","signup","nume","pass","firstname","lastname","organizatie","post","push","setTimeout","window","location","reload","getProfile","username","getSession","changePage","page","changeTab","getCurrentPage","getActivePage"],"mappings":"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","sourcesContent":["import actions from \"../actions/profile.actions\";\nimport axios from 'axios';\nimport {NOTIFICATION_TYPES, openNotification} from \"../../Components/Notifications/notifications\";\nimport history from '../../Routes/history'\n\nconst profileFunctions = dispatch => {\n   \n    const logout = () => {\n        dispatch(actions.logout());\n    };\n    const login = async (email, password) => {\n        var url = 'http://127.0.0.1:8080/login/?username=' + email + '&password=' + password\n        axios.get(url, {\n            headers: {\"Access-Control-Allow-Origin\": \"*\"}\n        }).then(response => {\n            const token = response.data.token;\n            if (response.status === 200) {\n                console.log(response)\n                openNotification('LOGIN', \"Autentificarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n                dispatch(actions.authenticate(token))\n                \n            }\n            else {\n                openNotification('LOGIN', \"Email sau parola gresita!\", NOTIFICATION_TYPES.ERROR);\n            }\n        });\n    };\n    const signup = async (nume, pass, email, firstname, lastname, organizatie) => {\n        var url = 'http://127.0.0.1:8080/users/createUser/?username=' + nume + '&password=' + pass +\n        '&email=' + email + '&firstname=' + firstname + '&lastname=' + lastname + '&organizationId=' + organizatie\n        axios.post(url, {\n            headers: {\"Access-Control-Allow-Origin\": \"*\"}\n        }).then(response => {\n            const token = response.data.token;\n            if (response.status === 200) {\n                console.log(response)\n                openNotification('SIGNUP', \"Inregistrarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n                dispatch(actions.signup(token))\n                history.push('/login')\n                setTimeout(function() {\n                    window.location.reload()\n                }, 1000)\n                \n            }\n            else {\n                openNotification('SIGNUP', \"Contul exista deja / Nu a putut fi inregistrat contul!\", NOTIFICATION_TYPES.ERROR);\n            }\n        })\n    };\n\n    const getProfile = async(username) => {\n        var url = 'http://127.0.0.1:8080/users/getUserByUsername/?username=' + username \n    }\n\n    const getSession = () => {\n        dispatch(actions.getSession());\n    };\n    const changePage = page => {\n        dispatch(actions.changeTab(page));\n    };\n    const getCurrentPage = () => {\n        dispatch(actions.getActivePage);\n    };\n    return {\n        logout,\n        login,\n        signup,\n        getSession,\n        changePage,\n        getCurrentPage\n    };\n};\n\nexport default profileFunctions;\n"]},"metadata":{},"sourceType":"module"}