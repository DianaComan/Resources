{"ast":null,"code":"import axios from 'axios';\nimport { NOTIFICATION_TYPES, openNotification } from \"../Notifications/notifications\";\nimport moment from 'moment';\n/*handle change*/\n\nexport const handleChange = (setState, event, field) => {\n  // console.log(event, field);\n  if (field === 'section' || field === 'day' || field === 'startDate' || field === 'doctor' || field === 'timeslot' || field === 'currency' || field === 'endDate') {\n    setState(prevState => ({ ...prevState,\n      [field]: event\n    }));\n  } else {\n    event.persist();\n    setState(prevState => ({ ...prevState,\n      [field]: event.target.value\n    }));\n  }\n};\n/*submissions*/\n\nexport const onSubmitSection = (name, description, setState) => {\n  axios.post('http://localhost:3003/api/admin/add/section', {\n    name: name,\n    description: description\n  }).then(response => {\n    fetchSection(setState);\n    openNotification('Adaugare sectie', \"Sectia a fost adaugata cu succes!\", NOTIFICATION_TYPES.SUCCESS);\n  }).catch(e => {\n    openNotification('Adaugare sectie', \"Sectia nu a putut fi adaugata!\", NOTIFICATION_TYPES.ERROR);\n  });\n};\nexport const onSubmitDoctor = (first_name, last_name, specialization, section, sections, setState) => {\n  axios.post('http://localhost:3003/api/admin/add/doctor', {\n    firstName: first_name,\n    lastName: last_name,\n    specialization: specialization,\n    sectionId: sections.filter(sect => sect.name === section)[0].id\n  }).then(response => {\n    fetchDoctors(setState);\n    openNotification('Adaugare doctor', \"Doctorul a fost adaugat cu succes!\", NOTIFICATION_TYPES.SUCCESS);\n  }).catch(e => {\n    openNotification('Adaugare doctor', \"Doctorul nu a putut fi adaugat!\", NOTIFICATION_TYPES.ERROR);\n  });\n};\nexport const onSubmitTimeInterval = (day, start, end, setState) => {\n  const value = {\n    day: day,\n    interval: moment(start).format('LT') + ' - ' + moment(end).format('LT')\n  };\n  axios.post('http://localhost:3003/api/admin/add/timeslot', {\n    value\n  }).then(response => {\n    fetchTimeSlots(setState);\n    openNotification('Adaugare interval timp', \"Intervalul a fost adaugat cu succes!\", NOTIFICATION_TYPES.SUCCESS);\n  }).catch(e => {\n    openNotification('Adaugare interval timp', \"Intervalul nu a putut fi adaugat!\", NOTIFICATION_TYPES.ERROR);\n  });\n};\nexport const onSubmitDoctorTimeSlot = (state, doctor, timeslot, setState) => {\n  const doctor_id = state.doctors.filter(doc => doc.first_name + ' ' + doc.last_name === doctor)[0].id;\n  const timeSlot = state.timeslots.filter(timesl => timesl.value.day + ' ' + timesl.value.interval === timeslot)[0].id;\n  console.log(doctor_id, timeSlot);\n  axios.post('http://localhost:3003/api/admin/add/doctortimeslot', {\n    idDoctor: doctor_id,\n    idTimeSlot: timeSlot\n  }).then(response => {\n    fetchDoctorsWithTime(setState);\n    openNotification('Adaugare interval timp', \"Intervalul a fost adaugat cu succes!\", NOTIFICATION_TYPES.SUCCESS);\n  }).catch(e => {\n    openNotification('Adaugare interval timp', \"Intervalul nu a putut fi adaugat!\", NOTIFICATION_TYPES.ERROR);\n  });\n};\nexport const onSubmitService = (state, setState) => {\n  const doctor_id = state.doctors.filter(doc => doc.first_name + ' ' + doc.last_name === state.doctor)[0].id;\n  const timeSlot = state.timeslots.filter(timesl => timesl.value.day + ' ' + timesl.value.interval === state.timeslot)[0].id;\n  console.log(doctor_id, timeSlot);\n  axios.post('http://localhost:3003/api/admin/add/service', {\n    name: state.name,\n    description: state.description,\n    price: state.price,\n    currency: state.currency,\n    doctorId: doctor_id,\n    intervalId: timeSlot\n  }).then(response => {\n    fetchServices(setState);\n    console.log(state.doctors.map(doctor => doctor.id === doctor_id));\n    openNotification('Adaugare serviciu', \"Serviciul a fost adaugat cu succes!\", NOTIFICATION_TYPES.SUCCESS);\n  }).catch(e => {\n    openNotification('Adaugare serviciu', \"Serviciul nu a putut fi adaugat!\", NOTIFICATION_TYPES.ERROR);\n  });\n};\nexport const callback = key => {\n  console.log(key);\n};\n/*fetch data*/\n\nexport const fetchSection = setState => {\n  axios.get('http://localhost:3003/api/user/sections').then(response => {\n    // console.log(response.data.data)\n    setState(prevState => ({ ...prevState,\n      sections: response.data.data.sections\n    }));\n  });\n};\nexport const fetchServices = setState => {\n  axios.get('http://localhost:3003/api/user/services').then(response => {\n    setState(prevState => ({ ...prevState,\n      services: response.data.data.services\n    }));\n  });\n};\nexport const fetchTimeSlots = setState => {\n  axios.get('http://localhost:3003/api/user/timeslots').then(response => {\n    // console.log(response.data.data)\n    setState(prevState => ({ ...prevState,\n      timeslots: response.data.data.timeSlots\n    }));\n  });\n};\nexport const fetchDoctors = setState => {\n  axios.get('http://localhost:3003/api/user/doctors').then(response => {\n    // console.log(response.data.data)\n    setState(prevState => ({ ...prevState,\n      doctors: response.data.data.doctors\n    }));\n  });\n};\nexport const fetchDoctorsWithTime = setState => {\n  axios.get('http://localhost:3003/api/user/doctorswithtimeslots').then(response => {\n    console.log(response.data.data);\n    setState(prevState => ({ ...prevState,\n      doctorsFullInfo: response.data.data.doctors\n    }));\n  });\n};\n/*delete data*/\n\nexport const deleteSection = (section, setState) => {\n  axios.post('http://localhost:3003/api/admin/delete/section', {\n    id: section.id\n  }).then(response => {\n    fetchSection(setState);\n  });\n};\nexport const deleteDoctor = (doctor, setState) => {\n  axios.post('http://localhost:3003/api/admin/delete/doctor', {\n    id: doctor.id\n  }).then(response => {\n    fetchSection(setState);\n  });\n};\nexport const deleteService = (service, setState) => {\n  axios.post('http://localhost:3003/api/admin/delete/service', {\n    id: service.id\n  }).then(response => {\n    fetchSection(setState);\n  });\n};\nexport const deleteTimeSlot = (timeslot, setState) => {\n  axios.post('http://localhost:3003/api/admin/delete/timeslot', {\n    id: timeslot.id\n  }).then(response => {\n    fetchSection(setState);\n  });\n};\nexport const getTimeSlotWithDoctor = (setState, doctor) => {\n  axios.get('http://localhost:3003/api/user/gettimeslotwithdoctor?id=' + doctor).then(response => {\n    console.log(response.data.data);\n  });\n};","map":{"version":3,"sources":["C:/Users/Stefan/Desktop/FrontEnd/ip-frontend/src/Components/Administration/actions.js"],"names":["axios","NOTIFICATION_TYPES","openNotification","moment","handleChange","setState","event","field","prevState","persist","target","value","onSubmitSection","name","description","post","then","response","fetchSection","SUCCESS","catch","e","ERROR","onSubmitDoctor","first_name","last_name","specialization","section","sections","firstName","lastName","sectionId","filter","sect","id","fetchDoctors","onSubmitTimeInterval","day","start","end","interval","format","fetchTimeSlots","onSubmitDoctorTimeSlot","state","doctor","timeslot","doctor_id","doctors","doc","timeSlot","timeslots","timesl","console","log","idDoctor","idTimeSlot","fetchDoctorsWithTime","onSubmitService","price","currency","doctorId","intervalId","fetchServices","map","callback","key","get","data","services","timeSlots","doctorsFullInfo","deleteSection","deleteDoctor","deleteService","service","deleteTimeSlot","getTimeSlotWithDoctor"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {NOTIFICATION_TYPES, openNotification} from \"../Notifications/notifications\";\nimport moment from 'moment';\n/*handle change*/\nexport const handleChange = (setState, event, field) => {\n    // console.log(event, field);\n    if (field === 'section' ||\n        field === 'day' ||\n        field === 'startDate' ||\n        field === 'doctor' ||\n        field === 'timeslot' ||\n        field === 'currency' ||\n        field === 'endDate') {\n        setState(prevState => ({\n            ...prevState,\n            [field]: event\n        }))\n    } else {\n        event.persist();\n        setState(prevState => ({\n            ...prevState,\n            [field]: event.target.value\n        }))\n    }\n};\n/*submissions*/\nexport const onSubmitSection = (name, description, setState) => {\n    axios.post('http://localhost:3003/api/admin/add/section', {\n        name: name,\n        description: description\n    }).then(response => {\n        fetchSection(setState)\n        openNotification('Adaugare sectie', \"Sectia a fost adaugata cu succes!\", NOTIFICATION_TYPES.SUCCESS);\n\n    }).catch(e => {\n        openNotification('Adaugare sectie', \"Sectia nu a putut fi adaugata!\", NOTIFICATION_TYPES.ERROR);\n\n    })\n};\nexport const onSubmitDoctor = (first_name, last_name, specialization, section, sections, setState) => {\n    axios.post('http://localhost:3003/api/admin/add/doctor', {\n        firstName: first_name,\n        lastName: last_name,\n        specialization: specialization,\n        sectionId: sections.filter(sect => sect.name === section)[0].id\n    }).then(response => {\n        fetchDoctors(setState);\n        openNotification('Adaugare doctor', \"Doctorul a fost adaugat cu succes!\", NOTIFICATION_TYPES.SUCCESS);\n    }).catch(e => {\n        openNotification('Adaugare doctor', \"Doctorul nu a putut fi adaugat!\", NOTIFICATION_TYPES.ERROR);\n\n    })\n};\nexport const onSubmitTimeInterval = (day, start, end, setState) => {\n    const value = {\n        day: day,\n        interval: moment(start).format('LT') + ' - ' + moment(end).format('LT')\n    };\n    axios.post('http://localhost:3003/api/admin/add/timeslot', {\n        value\n    }).then(response => {\n        fetchTimeSlots(setState);\n        openNotification('Adaugare interval timp', \"Intervalul a fost adaugat cu succes!\", NOTIFICATION_TYPES.SUCCESS);\n    }).catch(e => {\n        openNotification('Adaugare interval timp', \"Intervalul nu a putut fi adaugat!\", NOTIFICATION_TYPES.ERROR);\n\n    })\n};\nexport const onSubmitDoctorTimeSlot = (state, doctor, timeslot, setState) => {\n    const doctor_id = state.doctors.filter(doc => (doc.first_name + ' ' + doc.last_name) === doctor)[0].id;\n    const timeSlot = state.timeslots.filter(timesl => (timesl.value.day + ' ' + timesl.value.interval) === timeslot)[0].id;\n    console.log(doctor_id, timeSlot);\n    axios.post('http://localhost:3003/api/admin/add/doctortimeslot', {\n        idDoctor: doctor_id,\n        idTimeSlot: timeSlot\n    }).then(response => {\n        fetchDoctorsWithTime(setState);\n        openNotification('Adaugare interval timp', \"Intervalul a fost adaugat cu succes!\", NOTIFICATION_TYPES.SUCCESS);\n    }).catch(e => {\n        openNotification('Adaugare interval timp', \"Intervalul nu a putut fi adaugat!\", NOTIFICATION_TYPES.ERROR);\n\n    })\n};\nexport const onSubmitService = (state, setState) => {\n    const doctor_id = state.doctors.filter(doc => (doc.first_name + ' ' + doc.last_name) === state.doctor)[0].id;\n    const timeSlot = state.timeslots.filter(timesl => (timesl.value.day + ' ' + timesl.value.interval) === state.timeslot)[0].id;\n    console.log(doctor_id, timeSlot);\n    axios.post('http://localhost:3003/api/admin/add/service', {\n        name: state.name,\n        description: state.description,\n        price: state.price,\n        currency: state.currency,\n        doctorId: doctor_id,\n        intervalId: timeSlot\n    }).then(response => {\n        fetchServices(setState);\n        console.log(state.doctors.map(doctor => doctor.id === doctor_id));\n        openNotification('Adaugare serviciu', \"Serviciul a fost adaugat cu succes!\", NOTIFICATION_TYPES.SUCCESS);\n    }).catch(e => {\n        openNotification('Adaugare serviciu', \"Serviciul nu a putut fi adaugat!\", NOTIFICATION_TYPES.ERROR);\n\n    })\n};\nexport const callback = key => {\n    console.log(key);\n};\n\n/*fetch data*/\nexport const fetchSection = setState => {\n    axios.get('http://localhost:3003/api/user/sections')\n        .then(response => {\n            // console.log(response.data.data)\n            setState(prevState => ({\n                ...prevState,\n                sections: response.data.data.sections\n            }))\n        })\n};\nexport const fetchServices = setState => {\n    axios.get('http://localhost:3003/api/user/services')\n        .then(response => {\n            setState(prevState => ({\n                ...prevState,\n                services: response.data.data.services\n            }))\n        })\n};\nexport const fetchTimeSlots = setState => {\n    axios.get('http://localhost:3003/api/user/timeslots')\n        .then(response => {\n            // console.log(response.data.data)\n            setState(prevState => ({\n                ...prevState,\n                timeslots: response.data.data.timeSlots\n            }))\n        })\n};\n\nexport const fetchDoctors = setState => {\n    axios.get('http://localhost:3003/api/user/doctors')\n        .then(response => {\n            // console.log(response.data.data)\n            setState(prevState => ({\n                ...prevState,\n                doctors: response.data.data.doctors\n            }))\n        })\n}\nexport const fetchDoctorsWithTime = setState => {\n    axios.get('http://localhost:3003/api/user/doctorswithtimeslots')\n        .then(response => {\n            console.log(response.data.data)\n            setState(prevState => ({\n                ...prevState,\n                doctorsFullInfo: response.data.data.doctors\n            }))\n        })\n};\n\n/*delete data*/\nexport const deleteSection = (section, setState) => {\n    axios.post('http://localhost:3003/api/admin/delete/section', {\n        id: section.id\n    }).then(response => {\n        fetchSection(setState);\n    })\n};\nexport const deleteDoctor = (doctor, setState) => {\n    axios.post('http://localhost:3003/api/admin/delete/doctor', {\n        id: doctor.id\n    }).then(response => {\n        fetchSection(setState);\n    })\n};\nexport const deleteService = (service, setState) => {\n    axios.post('http://localhost:3003/api/admin/delete/service', {\n        id: service.id\n    }).then(response => {\n        fetchSection(setState);\n    })\n};\nexport const deleteTimeSlot = (timeslot, setState) => {\n    axios.post('http://localhost:3003/api/admin/delete/timeslot', {\n        id: timeslot.id\n    }).then(response => {\n        fetchSection(setState);\n    })\n};\nexport const getTimeSlotWithDoctor = (setState, doctor) => {\n    axios.get('http://localhost:3003/api/user/gettimeslotwithdoctor?id=' + doctor)\n        .then(response => {\n            console.log(response.data.data)\n        })\n};\n"]},"metadata":{},"sourceType":"module"}