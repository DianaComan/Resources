{"ast":null,"code":"import actions from \"../actions/profile.actions\";\nimport axios from 'axios';\nimport { NOTIFICATION_TYPES, openNotification } from \"../../Components/Notifications/notifications\";\n\nconst profileFunctions = dispatch => {\n  const logout = () => {\n    dispatch(actions.logout());\n  };\n\n  const login = async (email, password) => {\n    axios.post('http://localhost:3003/api/auth/user/login', {\n      email: email,\n      password: password\n    }).then(response => {\n      const token = response.data.data.token;\n      openNotification('LOGIN', \"Autentificarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n      dispatch(actions.authenticate(token));\n    }).catch(e => {\n      openNotification('LOGIN', \"Email sau parola gresita!\", NOTIFICATION_TYPES.ERROR);\n    });\n  };\n\n  const signup = async (nume, pass, email, firstname, lastname, organizatie) => {\n    url = 'http://127.0.0.1:8080/users/createUser/?username=' + nume + '&password=' + pass + '&email=' + email + '&firstname=' + firstname + '&lastname=' + lastname + '&organizationId=' + organizatie;\n    console.log(url); // axios.post('http://127.0.0.1:8080/users/createUser/').then(response => {\n    //     const token = response.data.data.token;\n    //     openNotification('SIGNUP', \"Inregistrarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n    //     dispatch(actions.signup(token))\n    // }).catch(e => {\n    //     openNotification('SIGNUP', \"Contul exista deja / Nu a putut fi inregistrat contul!\", NOTIFICATION_TYPES.ERROR);\n    // });\n  };\n\n  const getSession = () => {\n    dispatch(actions.getSession());\n  };\n\n  const changePage = page => {\n    dispatch(actions.changeTab(page));\n  };\n\n  const getCurrentPage = () => {\n    dispatch(actions.getActivePage);\n  };\n\n  return {\n    logout,\n    login,\n    signup,\n    getSession,\n    changePage,\n    getCurrentPage\n  };\n};\n\nexport default profileFunctions;","map":{"version":3,"sources":["C:/Users/Stefan/Desktop/FrontEnd/ip-frontend/src/Context/functions/profile.functions.js"],"names":["actions","axios","NOTIFICATION_TYPES","openNotification","profileFunctions","dispatch","logout","login","email","password","post","then","response","token","data","SUCCESS","authenticate","catch","e","ERROR","signup","nume","pass","firstname","lastname","organizatie","url","console","log","getSession","changePage","page","changeTab","getCurrentPage","getActivePage"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,4BAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,kBAAR,EAA4BC,gBAA5B,QAAmD,8CAAnD;;AAEA,MAAMC,gBAAgB,GAAGC,QAAQ,IAAI;AACjC,QAAMC,MAAM,GAAG,MAAM;AACjBD,IAAAA,QAAQ,CAACL,OAAO,CAACM,MAAR,EAAD,CAAR;AACH,GAFD;;AAGA,QAAMC,KAAK,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACrCR,IAAAA,KAAK,CAACS,IAAN,CAAW,2CAAX,EAAwD;AACpDF,MAAAA,KAAK,EAAEA,KAD6C;AAEpDC,MAAAA,QAAQ,EAAEA;AAF0C,KAAxD,EAGGE,IAHH,CAGQC,QAAQ,IAAI;AAChB,YAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBD,KAAjC;AACAV,MAAAA,gBAAgB,CAAC,OAAD,EAAU,uCAAV,EAAmDD,kBAAkB,CAACa,OAAtE,CAAhB;AACAV,MAAAA,QAAQ,CAACL,OAAO,CAACgB,YAAR,CAAqBH,KAArB,CAAD,CAAR;AACH,KAPD,EAOGI,KAPH,CAOSC,CAAC,IAAI;AACVf,MAAAA,gBAAgB,CAAC,OAAD,EAAU,2BAAV,EAAuCD,kBAAkB,CAACiB,KAA1D,CAAhB;AACH,KATD;AAUH,GAXD;;AAYA,QAAMC,MAAM,GAAG,OAAOC,IAAP,EAAaC,IAAb,EAAmBd,KAAnB,EAA0Be,SAA1B,EAAqCC,QAArC,EAA+CC,WAA/C,KAA+D;AAC1EC,IAAAA,GAAG,GAAG,sDAAsDL,IAAtD,GAA6D,YAA7D,GAA4EC,IAA5E,GACN,SADM,GACMd,KADN,GACc,aADd,GAC8Be,SAD9B,GAC0C,YAD1C,GACyDC,QADzD,GACoE,kBADpE,GACyFC,WAD/F;AAEAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAH0E,CAI1E;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAXD;;AAaA,QAAMG,UAAU,GAAG,MAAM;AACrBxB,IAAAA,QAAQ,CAACL,OAAO,CAAC6B,UAAR,EAAD,CAAR;AACH,GAFD;;AAGA,QAAMC,UAAU,GAAGC,IAAI,IAAI;AACvB1B,IAAAA,QAAQ,CAACL,OAAO,CAACgC,SAAR,CAAkBD,IAAlB,CAAD,CAAR;AACH,GAFD;;AAGA,QAAME,cAAc,GAAG,MAAM;AACzB5B,IAAAA,QAAQ,CAACL,OAAO,CAACkC,aAAT,CAAR;AACH,GAFD;;AAGA,SAAO;AACH5B,IAAAA,MADG;AAEHC,IAAAA,KAFG;AAGHa,IAAAA,MAHG;AAIHS,IAAAA,UAJG;AAKHC,IAAAA,UALG;AAMHG,IAAAA;AANG,GAAP;AAQH,CA9CD;;AAgDA,eAAe7B,gBAAf","sourcesContent":["import actions from \"../actions/profile.actions\";\nimport axios from 'axios';\nimport {NOTIFICATION_TYPES, openNotification} from \"../../Components/Notifications/notifications\";\n\nconst profileFunctions = dispatch => {\n    const logout = () => {\n        dispatch(actions.logout());\n    };\n    const login = async (email, password) => {\n        axios.post('http://localhost:3003/api/auth/user/login', {\n            email: email,\n            password: password\n        }).then(response => {\n            const token = response.data.data.token;\n            openNotification('LOGIN', \"Autentificarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n            dispatch(actions.authenticate(token))\n        }).catch(e => {\n            openNotification('LOGIN', \"Email sau parola gresita!\", NOTIFICATION_TYPES.ERROR);\n        });\n    };\n    const signup = async (nume, pass, email, firstname, lastname, organizatie) => {\n        url = 'http://127.0.0.1:8080/users/createUser/?username=' + nume + '&password=' + pass +\n        '&email=' + email + '&firstname=' + firstname + '&lastname=' + lastname + '&organizationId=' + organizatie\n        console.log(url)\n        // axios.post('http://127.0.0.1:8080/users/createUser/').then(response => {\n        //     const token = response.data.data.token;\n        //     openNotification('SIGNUP', \"Inregistrarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n        //     dispatch(actions.signup(token))\n        // }).catch(e => {\n        //     openNotification('SIGNUP', \"Contul exista deja / Nu a putut fi inregistrat contul!\", NOTIFICATION_TYPES.ERROR);\n        // });\n    };\n\n    const getSession = () => {\n        dispatch(actions.getSession());\n    };\n    const changePage = page => {\n        dispatch(actions.changeTab(page));\n    };\n    const getCurrentPage = () => {\n        dispatch(actions.getActivePage);\n    };\n    return {\n        logout,\n        login,\n        signup,\n        getSession,\n        changePage,\n        getCurrentPage\n    };\n};\n\nexport default profileFunctions;\n"]},"metadata":{},"sourceType":"module"}