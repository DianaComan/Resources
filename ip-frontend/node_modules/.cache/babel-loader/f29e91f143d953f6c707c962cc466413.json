{"ast":null,"code":"import actions from \"../actions/profile.actions\";\nimport axios from 'axios';\nimport { NOTIFICATION_TYPES, openNotification } from \"../../Components/Notifications/notifications\";\nimport { Redirect } from 'react-router-dom';\n\nconst profileFunctions = dispatch => {\n  const logout = () => {\n    dispatch(actions.logout());\n  };\n\n  const login = async (email, password) => {\n    var url = 'http://127.0.0.1:8080/login/?username=' + email + '&password=' + password;\n    axios.get(url, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(response => {\n      const token = response.data.token;\n      openNotification('LOGIN', \"Autentificarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n      dispatch(actions.authenticate(token));\n    }).catch(e => {\n      openNotification('LOGIN', \"Email sau parola gresita!\", NOTIFICATION_TYPES.ERROR);\n    });\n  };\n\n  const signup = async (nume, pass, email, firstname, lastname, organizatie) => {\n    var url = 'http://127.0.0.1:8080/users/createUser/?username=' + nume + '&password=' + pass + '&email=' + email + '&firstname=' + firstname + '&lastname=' + lastname + '&organizationId=' + organizatie;\n    axios.post(url, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(response => {\n      console.log(response);\n      const token = response.data.token;\n      openNotification('SIGNUP', \"Inregistrarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n      dispatch(actions.signup(token));\n    }).catch(e => {\n      openNotification('SIGNUP', \"Contul exista deja / Nu a putut fi inregistrat contul!\", NOTIFICATION_TYPES.ERROR);\n    });\n  };\n\n  const getSession = () => {\n    dispatch(actions.getSession());\n  };\n\n  const changePage = page => {\n    dispatch(actions.changeTab(page));\n  };\n\n  const getCurrentPage = () => {\n    dispatch(actions.getActivePage);\n  };\n\n  return {\n    logout,\n    login,\n    signup,\n    getSession,\n    changePage,\n    getCurrentPage\n  };\n};\n\nexport default profileFunctions;","map":{"version":3,"sources":["C:/Users/Stefan/Desktop/FrontEnd/ip-frontend/src/Context/functions/profile.functions.js"],"names":["actions","axios","NOTIFICATION_TYPES","openNotification","Redirect","profileFunctions","dispatch","logout","login","email","password","url","get","headers","then","response","token","data","SUCCESS","authenticate","catch","e","ERROR","signup","nume","pass","firstname","lastname","organizatie","post","console","log","getSession","changePage","page","changeTab","getCurrentPage","getActivePage"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,4BAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,kBAAR,EAA4BC,gBAA5B,QAAmD,8CAAnD;AACA,SAAQC,QAAR,QAAuB,kBAAvB;;AAEA,MAAMC,gBAAgB,GAAGC,QAAQ,IAAI;AACjC,QAAMC,MAAM,GAAG,MAAM;AACjBD,IAAAA,QAAQ,CAACN,OAAO,CAACO,MAAR,EAAD,CAAR;AACH,GAFD;;AAGA,QAAMC,KAAK,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACrC,QAAIC,GAAG,GAAG,2CAA2CF,KAA3C,GAAmD,YAAnD,GAAkEC,QAA5E;AACAT,IAAAA,KAAK,CAACW,GAAN,CAAUD,GAAV,EAAe;AACXE,MAAAA,OAAO,EAAE;AAAC,uCAA+B;AAAhC;AADE,KAAf,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,YAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAT,CAAcD,KAA5B;AACAb,MAAAA,gBAAgB,CAAC,OAAD,EAAU,uCAAV,EAAmDD,kBAAkB,CAACgB,OAAtE,CAAhB;AACAZ,MAAAA,QAAQ,CAACN,OAAO,CAACmB,YAAR,CAAqBH,KAArB,CAAD,CAAR;AACH,KAND,EAMGI,KANH,CAMSC,CAAC,IAAI;AACVlB,MAAAA,gBAAgB,CAAC,OAAD,EAAU,2BAAV,EAAuCD,kBAAkB,CAACoB,KAA1D,CAAhB;AACH,KARD;AASH,GAXD;;AAYA,QAAMC,MAAM,GAAG,OAAOC,IAAP,EAAaC,IAAb,EAAmBhB,KAAnB,EAA0BiB,SAA1B,EAAqCC,QAArC,EAA+CC,WAA/C,KAA+D;AAC1E,QAAIjB,GAAG,GAAG,sDAAsDa,IAAtD,GAA6D,YAA7D,GAA4EC,IAA5E,GACV,SADU,GACEhB,KADF,GACU,aADV,GAC0BiB,SAD1B,GACsC,YADtC,GACqDC,QADrD,GACgE,kBADhE,GACqFC,WAD/F;AAEA3B,IAAAA,KAAK,CAAC4B,IAAN,CAAWlB,GAAX,EAAgB;AACZE,MAAAA,OAAO,EAAE;AAAC,uCAA+B;AAAhC;AADG,KAAhB,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChBe,MAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAZ;AACA,YAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAT,CAAcD,KAA5B;AACAb,MAAAA,gBAAgB,CAAC,QAAD,EAAW,sCAAX,EAAmDD,kBAAkB,CAACgB,OAAtE,CAAhB;AACAZ,MAAAA,QAAQ,CAACN,OAAO,CAACuB,MAAR,CAAeP,KAAf,CAAD,CAAR;AACH,KAPD,EAOGI,KAPH,CAOSC,CAAC,IAAI;AACVlB,MAAAA,gBAAgB,CAAC,QAAD,EAAW,wDAAX,EAAqED,kBAAkB,CAACoB,KAAxF,CAAhB;AACH,KATD;AAUH,GAbD;;AAeA,QAAMU,UAAU,GAAG,MAAM;AACrB1B,IAAAA,QAAQ,CAACN,OAAO,CAACgC,UAAR,EAAD,CAAR;AACH,GAFD;;AAGA,QAAMC,UAAU,GAAGC,IAAI,IAAI;AACvB5B,IAAAA,QAAQ,CAACN,OAAO,CAACmC,SAAR,CAAkBD,IAAlB,CAAD,CAAR;AACH,GAFD;;AAGA,QAAME,cAAc,GAAG,MAAM;AACzB9B,IAAAA,QAAQ,CAACN,OAAO,CAACqC,aAAT,CAAR;AACH,GAFD;;AAGA,SAAO;AACH9B,IAAAA,MADG;AAEHC,IAAAA,KAFG;AAGHe,IAAAA,MAHG;AAIHS,IAAAA,UAJG;AAKHC,IAAAA,UALG;AAMHG,IAAAA;AANG,GAAP;AAQH,CAhDD;;AAkDA,eAAe/B,gBAAf","sourcesContent":["import actions from \"../actions/profile.actions\";\nimport axios from 'axios';\nimport {NOTIFICATION_TYPES, openNotification} from \"../../Components/Notifications/notifications\";\nimport {Redirect} from 'react-router-dom';\n\nconst profileFunctions = dispatch => {\n    const logout = () => {\n        dispatch(actions.logout());\n    };\n    const login = async (email, password) => {\n        var url = 'http://127.0.0.1:8080/login/?username=' + email + '&password=' + password\n        axios.get(url, {\n            headers: {\"Access-Control-Allow-Origin\": \"*\"}\n        }).then(response => {\n            const token = response.data.token;\n            openNotification('LOGIN', \"Autentificarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n            dispatch(actions.authenticate(token))\n        }).catch(e => {\n            openNotification('LOGIN', \"Email sau parola gresita!\", NOTIFICATION_TYPES.ERROR);\n        });\n    };\n    const signup = async (nume, pass, email, firstname, lastname, organizatie) => {\n        var url = 'http://127.0.0.1:8080/users/createUser/?username=' + nume + '&password=' + pass +\n        '&email=' + email + '&firstname=' + firstname + '&lastname=' + lastname + '&organizationId=' + organizatie\n        axios.post(url, {\n            headers: {\"Access-Control-Allow-Origin\": \"*\"}\n        }).then(response => {\n            console.log(response)\n            const token = response.data.token;\n            openNotification('SIGNUP', \"Inregistrarea s-a realizat cu succes\", NOTIFICATION_TYPES.SUCCESS);\n            dispatch(actions.signup(token))\n        }).catch(e => {\n            openNotification('SIGNUP', \"Contul exista deja / Nu a putut fi inregistrat contul!\", NOTIFICATION_TYPES.ERROR);\n        });\n    };\n\n    const getSession = () => {\n        dispatch(actions.getSession());\n    };\n    const changePage = page => {\n        dispatch(actions.changeTab(page));\n    };\n    const getCurrentPage = () => {\n        dispatch(actions.getActivePage);\n    };\n    return {\n        logout,\n        login,\n        signup,\n        getSession,\n        changePage,\n        getCurrentPage\n    };\n};\n\nexport default profileFunctions;\n"]},"metadata":{},"sourceType":"module"}